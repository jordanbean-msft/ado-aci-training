parameters:
  - name: appName
  - name: azpPool
  - name: azpToken
  - name: azpUrl
  - name: azureServiceConnection
  - name: containerRegistryName
  - name: deploymentName
  - name: environmentName
  - name: imageName
  - name: imageVersion
  - name: location
  - name: numberOfContainersToCreate
  - name: pathToAdoAgentsDirectory
  - name: resourceGroupName

steps:
  - task: AzureCLI@2
    displayName: Deploy ADO Build Agents
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment group create --resource-group ${{ parameters.resourceGroupName }} \
                                   --name ${{ parameters.deploymentName }} \
                                   --template-file ${{ parameters.pathToAdoAgentsDirectory }}/${{ parameters.deploymentName }}/main.bicep \
                                   --parameters azpPool=${{ parameters.azpPool }} \
                                   --parameters azpToken=${{ parameters.azpToken }} \
                                   --parameters azpUrl=${{ parameters.azpUrl }} \
                                   --parameters imageName=${{ parameters.imageName }} \
                                   --parameters imageVersion=${{ parameters.imageVersion }} \
                                   --parameters containerRegistryName=${{ parameters.containerRegistryName }} \
                                   --parameters appName=${{ parameters.appName }} \
                                   --parameters location=${{ parameters.location }} \
                                   --parameters environment=${{ parameters.environmentName }} \
                                   --parameters numberOfContainersToCreate=${{ parameters.numberOfContainersToCreate }}

        echo "az deployment group show --resource-group ${{ parameters.resourceGroupName }} --name ${{ parameters.deploymentName }}"
        deploymentoutputs=$(az deployment group show --resource-group ${{ parameters.resourceGroupName }} --name ${{ parameters.deploymentName }} \
        --query properties.outputs)

        echo 'convert outputs to variables'
        echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value]' |
        while IFS=$"\n" read -r c; do
          outputname=$(echo "$c" | jq -r '.[0]')
          outputvalue=$(echo "$c" | jq -r '.[1]')
          echo "setting variable $outputname=$outputvalue"
          echo "##vso[task.setvariable variable=$outputname]$outputvalue"
        done